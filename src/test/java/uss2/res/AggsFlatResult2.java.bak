package uss2.res;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import org.apache.commons.collections4.MapUtils;

import uss2.es.uss.res.BaseResult;
import uss2.sysUtils.ObjectUtils;
import uss2.tree.BaseNode;
import uss2.tree.FlatNode;
import uss2.tree.TreeNode;

import uss.res.AggsTreeResult2.AggsTreeItem;

/**
 * USS aggs flat result
 * 
 * @author Ponfee
 */
public class AggsFlatResult2 extends BaseResult {

    private static final long serialVersionUID = 8416510168590360734L;

    private Map<String, AggsFlatItem> aggs;

    public AggsFlatResult2() {}

    public AggsFlatResult2(AggsTreeResult2 aggs) {
        super(aggs);

        Map<String, AggsTreeItem[]> $aggs = Optional.ofNullable(aggs.getAggs())
                                                    .orElse(Collections.emptyMap());

        this.aggs = new HashMap<>($aggs.size());
        $aggs.forEach((agg, items) -> {
            TreeNode<String, AggsTreeItem> root = TreeNode.createRoot(agg); // agg as root id
            List<FlatNode<String, AggsTreeItem>> nodes = root.mount(toNodes(root.getNid(), items))
                                                             .flatHierarchy();
            List<FlatNode<String, AggsTreeItem>> leafs = nodes.stream().filter(FlatNode::isLeaf)
                                                              .collect(Collectors.toList());
            Map<String, AggsTreeItem> map = nodes.stream().filter(
                e -> Objects.nonNull(e.getAttach())
            ).collect(
                Collectors.toMap(FlatNode::getNid, FlatNode::getAttach)
            );

            List<Object[]> dataset = leafs.stream().map(leaf -> {
                List<Object> row = 
                leaf.getPath().stream().filter(
                    id ->  Objects.nonNull(map.get(id))
                ).map(
                    id -> map.get(id).getKey()
                ).collect(
                    Collectors.toList()
                );
                row.add(leaf.getAttach().getVal());
                return row.toArray();
            }).collect(
                Collectors.toList()
            );

            String[] columns = leafs.get(0).getPath().stream().map(
                id -> Optional.ofNullable(map.get(id)).map(AggsTreeItem::getAgg).orElse(id)
            ).toArray(
                String[]::new
            );

            this.aggs.put(agg, new AggsFlatItem(columns, dataset));
        });
    }

    private List<BaseNode<String, AggsTreeItem>> toNodes(String pid, AggsTreeItem[] items) {
        List<BaseNode<String, AggsTreeItem>> children = new ArrayList<>();
        toNodes(pid, items, children);
        return children;
    }

    private void toNodes(String pid, AggsTreeItem[] items, 
                         List<BaseNode<String, AggsTreeItem>> nodes) {
        AtomicInteger order = new AtomicInteger(1);
        Arrays.stream(items).forEach(item -> {
            String nid = ObjectUtils.uuid32();
            nodes.add(new BaseNode<>(nid, pid, order.getAndIncrement(), item));
            if (item.getSub() != null) {
                toNodes(nid, item.getSub(), nodes);
            }
        });
    }

    public Map<String, AggsFlatItem> getAggs() {
        return aggs;
    }

    public void setAggs(Map<String, AggsFlatItem> aggs) {
        this.aggs = aggs;
    }

    public boolean isSingle() {
        return MapUtils.isEmpty(aggs) || aggs.size() == 1;
    }

    public AggsSingleResult2 toAggsSingleResult() {
        return new AggsSingleResult2(this);
    }

    public static class AggsFlatItem implements Serializable {
        private static final long serialVersionUID = 4286477056501715580L;

        private String[]       columns;
        private List<Object[]> dataset;

        public AggsFlatItem() {}

        public AggsFlatItem(String[] columns, List<Object[]> dataset) {
            this.columns = columns;
            this.dataset = dataset;
        }

        public String[] getColumns() {
            return columns;
        }

        public void setColumns(String[] columns) {
            this.columns = columns;
        }

        public List<Object[]> getDataset() {
            return dataset;
        }

        public void setDataset(List<Object[]> dataset) {
            this.dataset = dataset;
        }
    }

}
